<?xml version="1.0"?>
<doc>
    <assembly>
        <name>package.facepunch.libstates</name>
    </assembly>
    <members>
        <member name="P:Sandbox.States.State.Id">
            <summary>
            Unique ID of this state in its containing <see cref="T:Sandbox.States.StateMachineComponent"/>.
            </summary>
        </member>
        <member name="P:Sandbox.States.State.Name">
            <summary>
            Helpful name of this state.
            </summary>
        </member>
        <member name="P:Sandbox.States.State.OnEnterState">
            <summary>
            Event dispatched on the owner when this state is entered.
            </summary>
        </member>
        <member name="P:Sandbox.States.State.OnUpdateState">
            <summary>
            Event dispatched on the owner while this state is active.
            </summary>
        </member>
        <member name="P:Sandbox.States.State.OnLeaveState">
            <summary>
            Event dispatched on the owner when this state is exited.
            </summary>
        </member>
        <member name="F:Sandbox.States.StateMachineComponent.MaxInstantTransitions">
            <summary>
            How many instant state transitions in a row until we throw an error?
            </summary>
        </member>
        <member name="P:Sandbox.States.StateMachineComponent.States">
            <summary>
            All states in this machine.
            </summary>
        </member>
        <member name="P:Sandbox.States.StateMachineComponent.Transitions">
            <summary>
            All transitions between states in this machine.
            </summary>
        </member>
        <member name="P:Sandbox.States.StateMachineComponent.InitialState">
            <summary>
            Which state becomes active when the machine starts?
            </summary>
        </member>
        <member name="P:Sandbox.States.StateMachineComponent.CurrentState">
            <summary>
            Which state is currently active?
            </summary>
        </member>
        <member name="P:Sandbox.States.StateMachineComponent.StateTime">
            <summary>
            How long have we been in the current state?
            </summary>
        </member>
        <member name="M:Sandbox.States.StateMachineComponent.SendMessage(System.String)">
            <summary>
            Send a message to trigger a transition with a matching <see cref="P:Sandbox.States.Transition.Message"/>.
            </summary>
            <param name="message">Message name.</param>
        </member>
        <member name="P:Sandbox.States.Transition.StateMachine">
            <summary>
            The state machine containing this transition.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.Id">
            <summary>
            Unique ID of this transition in the <see cref="T:Sandbox.States.StateMachineComponent"/>.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.Source">
            <summary>
            The state this transition originates from.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.Target">
            <summary>
            The destination of this transition.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.IsValid">
            <summary>
            Does this transition still belong to a state.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.IsConditional">
            <summary>
            This transition has either a <see cref="P:Sandbox.States.Transition.Condition"/> or <see cref="P:Sandbox.States.Transition.Message"/>.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.HasDelay">
            <summary>
            This transition has either a min or max delay.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.MinDelay">
            <summary>
            Optional delay before this transition can be taken. If <see cref="P:Sandbox.States.Transition.MaxDelay"/> is also provided,
            but without a <see cref="P:Sandbox.States.Transition.Condition"/>, then a uniformly random delay is selected between min and max.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.MaxDelay">
            <summary>
            Optional delay until this transition can no longer be taken. If <see cref="P:Sandbox.States.Transition.MinDelay"/> is also provided,
            but without a <see cref="P:Sandbox.States.Transition.Condition"/>, then a uniformly random delay is selected between min and max.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.Message">
            <summary>
            Optional message string that will trigger this condition.
            Messages are sent with <see cref="M:Sandbox.States.StateMachineComponent.SendMessage(System.String)"/>.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.Condition">
            <summary>
            Optional condition to evaluate. If provided, the transition will be taken
            as soon as the condition evaluates to true, given we are between <see cref="P:Sandbox.States.Transition.MinDelay"/>
            and <see cref="P:Sandbox.States.Transition.MaxDelay"/>.
            </summary>
        </member>
        <member name="P:Sandbox.States.Transition.OnTransition">
            <summary>
            Action performed when this transition is taken.
            </summary>
        </member>
    </members>
</doc>
